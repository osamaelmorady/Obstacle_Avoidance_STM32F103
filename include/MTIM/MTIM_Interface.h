#ifndef		_MTIM_INTERFACE_H_
#define 	_MTIM_INTERFACE_H_


#include "MTIM/MTIM_Private.h"
#include  "LIB/ERROR_STATE.h"





/***********************************************/
/***********************************************/
typedef enum
{
	STATUS_DISABLE = 0 ,
	STATUS_ENABLE  ,

	STATUS_OFF = 0 ,
	STATUS_ON

}UTILS_STATUS ;





/***********************************************//***********************************************//***********************************************//***********************************************/
/***********************************************//************************************	Timer Config	****************************************//***********************************************/
/***********************************************//***********************************************//***********************************************//***********************************************/


/***********************************************/
/***********************************************/
typedef enum
{
	TIM_COUNTER_UP ,

	TIM_COUNTER_DOWN

}UTILS_COUNTER_TYPE ;



/***********************************************/
/***********************************************/
typedef enum
{
	TIM_PULSE_CONTINUOUS ,

	TIM_PULSE_SINGLE

}UTILS_PULSE_TYPE ;




/***********************************************/
/***********************************************/
typedef struct
{
	 UTILS_COUNTER_TYPE   TIM_COUNTER_DIRECTION ;

	 UTILS_STATUS   TIM_INTERRUPT_STATUS ;

	 UTILS_STATUS   TIM_EVENT_UPDATE ;

	 UTILS_PULSE_TYPE   TIM_PULSE_MODE ;

	 u16 			TIM_PRESCALLER ;

	 u8 			TIM_REPETITION_VAL ;



}TIMER_Configurations ;



/***********************************************//***********************************************//***********************************************//***********************************************/
/***********************************************//************************************	PWM Config	****************************************//***********************************************/
/***********************************************//***********************************************//***********************************************//***********************************************/




/***********************************************/
/***********************************************/
typedef enum
{
	PWM_CH1 = 0 , PWM_CH2 , PWM_CH3 , PWM_CH4
	
}UTILS_PWM_CHANNEL ;




/***********************************************/
/***********************************************/
typedef enum
{
	PWM_POLARITY_ACTIVE_HIGH = 0 ,  PWM_POLARITY_ACTIVE_LOW
	
}UTILS_CHANNEL_POLARITY ;




/***********************************************/
/***********************************************/
typedef enum
{
	PWM_CM_UP_COUNTER_ACTIVE = 0b110  ,  PWM_CM_DOWN_COUNTER_ACTIVE = 0b111 ,
	
	PWM_CM_UP_COUNTER_INACTIVE = 0b111 ,  PWM_CM_DOWN_COUNTER_INACTIVE = 0b110
	
}UTILS_CHANNEL_COMPARE_MODE ;






/***********************************************/
/***********************************************/
typedef struct
{
	UTILS_PWM_CHANNEL	  Channel_Num ;
	
	UTILS_CHANNEL_POLARITY	 Channel_Polarity  ;
	
	UTILS_STATUS 	 Channel_Status ;
	
	UTILS_CHANNEL_COMPARE_MODE   Channel_CompareMode  ;
	

}PWM_Configurations ;




/***********************************************//***********************************************//***********************************************//***********************************************/
/***********************************************//***************************************		TIMER_APIs 	**************************************//**********************************************/
/***********************************************//***********************************************//***********************************************//***********************************************/


/***********************************************/
/***********************************************/
ErrorState	MTIM_EnuInit(MTIM_Typedef * TIMx_Num , TIMER_Configurations * TIMx_Config ) ;






/***********************************************/
/***********************************************/
ErrorState	MTIM_EnuStatus(MTIM_Typedef * TIMx_Num , UTILS_STATUS Copy_U8TimeStatus)  ;






/***********************************************/
/***********************************************/
ErrorState	MTIM_EnuBusyWait(MTIM_Typedef * TIMx_Num , u32 Copy_U32Period_US)   ;




/***********************************************/
/***********************************************/
ErrorState	MTIM_EnuSingleInterval( MTIM_Typedef * TIMx_Num , u32 Copy_U32Period_US , void (* Copy_PFun)(void) )   ;





/***********************************************/
/***********************************************/
ErrorState	MTIM_EnuPeriodicInterval( MTIM_Typedef * TIMx_Num , u32 Copy_U32Period_US , void (* Copy_PFun)(void) )   ;





/***********************************************/
/***********************************************/
ErrorState	MTIM_EnuGetElapsedTime(MTIM_Typedef * TIMx_Num , u32 * Copy_U32Period_US)   ;



/***********************************************/
/***********************************************/
ErrorState	MTIM_EnuGetRemainingTime(MTIM_Typedef * TIMx_Num , u32 * Copy_U32Period_US)   ;









/***********************************************//***********************************************//***********************************************//***********************************************/
/***********************************************//***************************************		PWM_APIs 	******************************************//**********************************************/
/***********************************************//***********************************************//***********************************************//***********************************************/




/***********************************************/
/***********************************************/
ErrorState	MPWM_EnuInit( MTIM_Typedef * TIMx_Num   , PWM_Configurations  CHx_Config )  ;



/***************************************************************************/
/***************************************************************************/
ErrorState	MPWM_EnuStatus( MTIM_Typedef * TIMx_Num   , UTILS_STATUS  Copy_U8Status)  ;



/***************************************************************************/
/***************************************************************************/
ErrorState	MPWM_EnuChannelPolarity(MTIM_Typedef * TIMx_Num   , UTILS_PWM_CHANNEL Copy_U8Channel , UTILS_CHANNEL_POLARITY Copy_U8Polarity) ;



/***************************************************************************/
/***************************************************************************/
ErrorState	MPWM_EnuChannelCompareMode( MTIM_Typedef * TIMx_Num   , UTILS_PWM_CHANNEL Copy_U8Channel , UTILS_CHANNEL_COMPARE_MODE Copy_U8Mode)  ;




/***************************************************************************/
/***************************************************************************/
ErrorState	MPWM_EnuChannelStatus( MTIM_Typedef * TIMx_Num   , UTILS_PWM_CHANNEL Copy_U8Channel , UTILS_STATUS  Copy_U8Status)  ;




/***************************************************************************/
/***************************************************************************/
ErrorState	MPWM_EnuSetDutyCycle( MTIM_Typedef * TIMx_Num   ,  UTILS_PWM_CHANNEL Copy_U8Channel , u32 Copy_U32Percent)  ;




/***************************************************************************/
/***************************************************************************/
ErrorState	MPWM_EnuPulseFrequency( MTIM_Typedef * TIMx_Num   ,  u32 Copy_U32Frequency)  ;



#endif
